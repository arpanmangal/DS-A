// program to print all the anagrams of a given word
import java.util.*;
import java.io.*;
import java.util.ArrayList;

public class Anagram {

    private class bucket {
        // stores the hash code of a string in form of 37 containers along with the original string
        public byte[] bucket;
        public String word;

        // constructors
        public bucket() {
            bucket = new byte[38]; // 0-[  == 32] 1-[' == 39], 2-11 for 0-9, 12-37 for a-z/
            for (int i = 1; i < 38; i++) bucket[i] = 0; // don't consider space
        }
        public bucket(String s) {
            this();
            this.word = s;
        }

        // functions
        public boolean hash() {
            // hashs the contained word into the bucket
            // System.out.println("hashing " + word);
            for (int i = 0; i < word.length(); i++) {
                // #optimisation -> probability of being a word is much more
                if (word.charAt(i) >= 97 && word.charAt(i) <= 122) bucket[word.charAt(i) - 85]++; //word.at(i) - 97 + 12, numbers
                else if (word.charAt(i) >= 48 && word.charAt(i) <= 57) bucket[word.charAt(i) - 46]++; //word.charAt(i) - 48 + 2, numbers
                else if (word.charAt(i) == 39) bucket[1]++;
                else if (word.charAt(i) == ' ') bucket[0]++;
                else {
                    // illegal letter
                    return false; // hash unsuccessful
                }
            }
            return true;
        }
        public boolean equalTo(bucket b) {
            for (int i = 0; i < 38; i++) {
                if (this.bucket[i] != b.bucket[i])
                    return false;
            }
            return true;
        }
        public void print() {
            // prints the buckets, mainly for debugging
            String s = word + ": ";
            for (int i = 0; i < 38; i++) {
                s += bucket[i] + " ";
            }
            System.out.println(s);
        }
        public bucket getDiff(String s) {
            // returns s - this
            bucket diff = new bucket();
            diff.word = "";
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) >= 97 && s.charAt(i) <= 122) diff.bucket[s.charAt(i) - 85]++; //s.at(i) - 97 + 12, numbers                
                else if (s.charAt(i) >= 48 && s.charAt(i) <= 57) diff.bucket[s.charAt(i) - 46]++; //s.charAt(i) - 48 + 2, numbers
                else if (s.charAt(i) == 39) diff.bucket[1]++;
                else if (s.charAt(i) == ' ') diff.bucket[0]++;
                else {
                    // illegal letter
                    return null; // hash unsuccessful
                }
            }
            for (int i = 1; i <= 1; i++) 
            {
                diff.bucket[i] -= this.bucket[i]; // don't consider space !!!
                if (diff.bucket[i] < 0) {
                    return null;
                }
                for(int j = 0; j < diff.bucket[i]; j++) {
                    // add the letter diff.bucket[i] times
                        diff.word += (char)(39);
                }
            }
            for (int i = 2; i < 12; i++) 
            {
                diff.bucket[i] -= this.bucket[i]; // don't consider space !!!
                if (diff.bucket[i] < 0) {
                    return null;
                }
                for(int j = 0; j < diff.bucket[i]; j++) {
                    // add the letter diff.bucket[i] times
                        diff.word += (char)(i + 46);
                }
            }
            for (int i = 12; i < 38; i++) 
            {
                diff.bucket[i] -= this.bucket[i]; // don't consider space !!!
                if (diff.bucket[i] < 0) {
                    return null;
                }
                for(int j = 0; j < diff.bucket[i]; j++) {
                    // add the letter diff.bucket[i] times
                        diff.word += (char)(i + 85);
                }
            }
            // System.out.println("before return: "+diff.word);
            return diff;
        }
    }

    private class pair {
        public String prefix;
        public String suffix;

        // constructor
        public pair(String p, String s) {
            prefix = p;
            suffix = s;
        }
    }

    private class container {
        public ArrayList<bucket> container;

        public container() {
            container = new ArrayList<bucket>();
        }
    }

    private int hash3(bucket b) {
        // gives a secondary hash of a string according to its first 3 characters
        int hash = 0;
        // space->'0', "'"->'1',0-9->'2-11', a-z->'12-37'; 
        for (int i = 0; i < 38; i++) hash += b.bucket[i] * i; // silly mistake to keep it just b.bucket[i]
        return hash;//s.charAt(0) + s.charAt(1) + s.charAt(2); // 122 * 3 = 366 ~ 400
    }
    private int vocabSize;
    private ArrayList<container>[] words; // stores the vocab words according to their size
    private void loadVocab(Scanner s) {
        vocabSize = s.nextInt();
        String in;
        words = new ArrayList[10]; // for storing words of size 3 to 12;
        int hash; // value of first three characters of the string

        for (int i = 0; i < 10; i++) {
            words[i] = new ArrayList<container>(450);
            // System.out.println(words[i].size());
            for (int j = 0; j < 450; j++) {
                words[i].add(new container());
            }
        }
        for (int i = 0; i < vocabSize; i++) {
            // take input and store it
            in = s.next();
            if (in.length() < 3 || in.length() > 12) {
                // ignore
                continue;
            }
            bucket cell = new bucket(in);
            if (!cell.hash()) {
                // illegal input
                continue;
            }
            // add to appropriate place
            hash = hash3(cell); // returns index where to store this word
            words[in.length() - 3].get(hash).container.add(cell);
        }
    }

    private ArrayList<String> getAnagrams(String s) {
        ArrayList<String> anagrams = new ArrayList<>();

        // get no space anagrams
        bucket hash = new bucket(s);
        int size = s.length();

        if (s.length() > 12 || s.length() < 3 || !hash.hash()) return anagrams; // long word, short word or unsuccesful hash => invalid word
        getFirstOrderAngrms(hash, anagrams, s.length());
        // get one space anagrams
        if (s.length() >= 6) getSecondOrderAngrms(hash, anagrams, s.length());
        if (s.length() >= 9) getThirdOrderAngrms(hash, anagrams, s.length());
        Collections.sort(anagrams);
        // ArrayList<String> sortedAna = new ArrayList<>();
        // if (anagrams.size() > 0) sortedAna.add(anagrams.get(0));
        // for (int i = 1; i < anagrams.size(); i++) {
        //     if (!(anagrams.get(i).equals(anagrams.get(i - 1)))) {
        //         sortedAna.add(anagrams.get(i));
        //     }
        // }
        return anagrams;
    }
    private void getFirstOrderAngrms(bucket hash, ArrayList anagrams, int size) {
        // returns all 0 space anagrams of s
        // System.out.println("in get 1st order:"+s);
        // ArrayList<String> anagrams = new ArrayList<>();
        // bucket hash = new bucket(s);
        // int size = s.length();

        // if (size > 12 || size < 3 || !hash.hash()) return; // long word, short word or unsuccesful hash => invalid word
        
        int hash3 = hash3(hash);
        container cont = words[size - 3].get(hash3);
        // System.out.println(hash3 + "" + cont.container.size());
        for (int i = 0; i < cont.container.size(); i++) {
            // cont.container.get(i).print();
            // hash.print();
            if (cont.container.get(i).equalTo(hash)) {
                // found an anagram
                anagrams.add(cont.container.get(i).word);
                // there's only one anagram possible => foolish!!
                // break;
            }
        }
        return;
    }
    private void getSecondOrderAngrms(bucket hash, ArrayList<String> anagrams, int size) {
        // returns all 1 space anagrams of s
        // System.out.println("in get 2nd order: s = "+s);
        // ArrayList<String> anagrams = new ArrayList<>();
        // bucket hash = new bucket(s); // redundant
        // int size = s.length();

        // if (size < 6 || size > 12 || !hash.hash()) return; // long / short word or unsuccesful hash => invalid word

        // approach => for each word in dictionary, subtract it from current word, and prepend it to the anagrams of remaining word
        container cont;
        for (int p = 3; p <= size - 3; p++) {
            // iterate the vocab with str.len
            // System.out.println(p);
            // ArrayList<bucket> buckets = words[p - 3];
          for (int c = 0; c < 450; c++) {
            cont = words[p - 3].get(c);
            for (int i = 0; i < cont.container.size(); i++) {
                // buckets.get(i).print();
                // hash.print();
                // cont.container.get(i).print();
                // prefix is buckets.get(i).word
                bucket suffix = cont.container.get(i).getDiff(hash.word); // => change signature to getDiff(bucket)
                if (suffix == null) {
                    // difference not possible, prev not part of s
                    continue;
                }
                // System.out.println("\n");
                // suffix.print();
                // System.out.println("\n");
                // System.out.println("Prefix: "+cont.container.get(i).word+" Suffix: "+suffix.word);
                // ArrayList<String> suffAngm = new ArrayList<>();
                // suffAngm.addAll(getFirstOrderAngrms(suffix.word));
                int j = anagrams.size();
                getFirstOrderAngrms(suffix, anagrams, size - p);
                for (; j < anagrams.size(); j++) {
                    anagrams.set(j, cont.container.get(i).word + " " + anagrams.get(j));
                }
                // anagrams.addAll(suffAngm);
            }
          }
        }
        return;
    }
    private void getThirdOrderAngrms(bucket hash, ArrayList<String> anagrams, int size) {
        // returns all 1 space anagrams of s
        // System.out.println("in get 2nd order: s = "+s);
        // ArrayList<String> anagrams = new ArrayList<>();
        // bucket hash = new bucket(s);
        // int size = s.length();

        // if (size < 9 || size > 12 || !hash.hash()) return; // long / short word or unsuccesful hash => invalid word

        // approach => for each word in dictionary, subtract it from current word, and prepend it to the anagrams of remaining word
        container cont;
        for (int p = 3; p <= size - 3; p++) {
          for (int c = 0; c < 450; c++) {
            cont = words[p - 3].get(c);
            // iterate the vocab with str.len
            // System.out.println(p);
            // ArrayList<bucket> buckets = words[p - 3];
            for (int i = 0; i < cont.container.size(); i++) {
                // buckets.get(i).print();
                // hash.print();
                // System.out.println(buckets.get(i).word);
                // prefix is buckets.get(i).word
                bucket suffix = cont.container.get(i).getDiff(hash.word);
                if (suffix == null) {
                    // difference not possible, prev not part of s
                    continue;
                }
                // System.out.println("Prefix: "+buckets.get(i).word+" Suffix: "+suffix.word);
                // ArrayList<String> suffAngm = new ArrayList<>();
                int j = anagrams.size();
                // getFirstOrderAngrms(suffix, anagrams, size - p); // may be redundant!!
                if (size - p >= 6) getSecondOrderAngrms(suffix, anagrams, size - p);
                for (; j < anagrams.size(); j++) {
                    anagrams.set(j, cont.container.get(i).word + " " + anagrams.get(j));
                }
                // anagrams.addAll(suffAngm);
            }
          }
        }
        return;
    }

    private void printAnagrams(ArrayList<String> list) {
        // prints the elements of the anagram list
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
        System.out.println("-1");
    }


    public static void main(String args[]) {
        long startTime=System.currentTimeMillis();


        Scanner vocab = null;
        Scanner input = null;
            vocab = new Scanner(System.in); // vocabulary.txt
	  
        
        Anagram findAna = new Anagram(); // object of our class

        // load vocab
        findAna.loadVocab(vocab);

        // find anagrams of input strings
        int numInputs = vocab.nextInt();
        String in = "";
        ArrayList<String> anagrams;// = new ArrayList<>();
        for (int i = 0; i < numInputs; i++) {
            // anagrams.clear();
            in = vocab.next();
            findAna.printAnagrams(findAna.getAnagrams(in));
        }


        // testing prefix-suffix
     /*   ArrayList<pair> test = findAna.getPreSuffPairs(6, "ghypios");
        for (int i = 0; i < test.size(); i++) {
            System.out.println(test.get(i).prefix + " " + test.get(i).suffix);
        }*/
        long time=System.currentTimeMillis()-startTime;
        //System.out.println("time: "+time+" millis");
    }
}